# Energy Meter Scraper Environment Variables
# Copy this file to .env and fill in your values

# Energy meter HTTP endpoint
SCRAPE_URL=http://192.168.1.100/api/sensor

# Scraping configuration
SCRAPE_INTERVAL_SECONDS=2
SCRAPE_TIMEOUT_SECONDS=1.5
PUSH_INTERVAL_SECONDS=15

# Grafana Cloud Prometheus settings
# Get these from: https://grafana.com/orgs/YOUR_ORG/access-policies
PROMETHEUS_URL=https://prometheus-prod-01-eu-west-0.grafana.net/api/prom/push
PROMETHEUS_USERNAME=123456
PROMETHEUS_PASSWORD=glc_eyJrIjoixxxxxxxxxxxxxx...

# Metric name
METRIC_NAME=active_power_watts

# Start at even second for predictable timing
START_AT_EVEN_SECOND=true

# Ring buffer size (number of scrape results to keep in memory)
BUFFER_SIZE=1000

# Health check port
HEALTH_CHECK_PORT=8080

# Logging configuration
LOG_FORMAT=console   # json, console, or logfmt (use logfmt for Loki)
LOG_LEVEL=info       # debug, info, warn, error

# OpenTelemetry configuration
# Enable OpenTelemetry instrumentation (default: false)
OTEL_ENABLED=true

# Service identification
OTEL_SERVICE_NAME=pstryk-metric
OTEL_SERVICE_VERSION=1.0.0
OTEL_ENVIRONMENT=production

# OTLP Exporter configuration
# Protocol: http/protobuf (recommended) or grpc
OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf

# Global OTLP endpoint (used for both traces and metrics if specific endpoints not set)
# Get this from: https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/setup/quickstart/
# Example from Grafana: export OTEL_EXPORTER_OTLP_ENDPOINT="https://otlp-gateway-prod-us-central-0.grafana.net/otlp"
OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp-gateway-prod-us-central-0.grafana.net/otlp

# Global authentication headers (used for both traces and metrics if specific headers not set)
# Format: key1=value1,key2=value2 (for multiple headers, comma-separated)
# For Grafana Cloud: Authorization=Basic <base64(instanceId:token)>
#
# To generate the base64 token:
#   echo -n "INSTANCE_ID:GRAFANA_CLOUD_TOKEN" | base64
#
# Example:
#   echo -n "192047:glc_xxxxx" | base64
#   Output: MTkyMDQ3OmdsY194eHh4eA==
#   Then use: Authorization=Basic MTkyMDQ3OmdsY194eHh4eA==
#
OTEL_EXPORTER_OTLP_HEADERS=Authorization=Basic YOUR_BASE64_TOKEN_HERE

# Specific traces endpoint (optional, overrides OTEL_EXPORTER_OTLP_ENDPOINT if set)
# OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=https://otlp-gateway-prod-us-central-0.grafana.net/otlp

# Specific traces headers (optional, overrides OTEL_EXPORTER_OTLP_HEADERS if set)
# OTEL_EXPORTER_OTLP_TRACES_HEADERS=Authorization=Basic <your_base64_encoded_credentials>

# Specific metrics endpoint (optional, overrides OTEL_EXPORTER_OTLP_ENDPOINT if set)
# OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=https://otlp-gateway-prod-us-central-0.grafana.net/otlp

# Traces configuration
OTEL_TRACES_ENABLED=true
OTEL_TRACES_SAMPLING_RATIO=1.0    # 1.0 = 100% sampling (adjust for high volume)

# Traces batch processor configuration
OTEL_BSP_SCHEDULE_DELAY=5000      # milliseconds
OTEL_BSP_MAX_QUEUE_SIZE=2048
OTEL_BSP_MAX_EXPORT_BATCH_SIZE=512

# Metrics configuration
OTEL_METRICS_ENABLED=true
OTEL_METRICS_INTERVAL=30000       # milliseconds
OTEL_ENABLE_RUNTIME_METRICS=true  # Enable Go runtime metrics

# Pyroscope Profiling configuration
# Enable continuous profiling (default: false)
PYROSCOPE_ENABLED=false

# Pyroscope server address
# For Grafana Cloud Profiles, get this from: https://grafana.com/docs/grafana-cloud/monitor-applications/profiles/
# Example: https://profiles-prod-001.grafana.net
PYROSCOPE_SERVER_ADDRESS=http://pyroscope:4040

# Application name (identifies this service in profiles)
PYROSCOPE_APPLICATION_NAME=pstryk-metric

# Basic authentication (for Grafana Cloud)
# Get these from Grafana Cloud → Profiles → Configure
# PYROSCOPE_BASIC_AUTH_USER=<instance_id>
# PYROSCOPE_BASIC_AUTH_PASSWORD=<grafana_cloud_token>

# Tenant ID (for multi-tenant Pyroscope)
# PYROSCOPE_TENANT_ID=

# Profile types to enable (default: CPU and memory profiles enabled)
PYROSCOPE_CPU_PROFILE=true
PYROSCOPE_ALLOC_OBJECTS_PROFILE=true
PYROSCOPE_ALLOC_SPACE_PROFILE=true
PYROSCOPE_INUSE_OBJECTS_PROFILE=true
PYROSCOPE_INUSE_SPACE_PROFILE=true
PYROSCOPE_GOROUTINE_PROFILE=false
PYROSCOPE_MUTEX_PROFILE=false
PYROSCOPE_BLOCK_PROFILE=false

# Profiling rates (for mutex and block profiles)
# Rate of 5 means sample 1 in every 5 events
PYROSCOPE_MUTEX_PROFILE_RATE=5
PYROSCOPE_BLOCK_PROFILE_RATE=5

# Disable automatic garbage collection runs between heap profiles
PYROSCOPE_DISABLE_GC_RUNS=false
