# Energy Meter Scraper Configuration

# HTTP endpoint to scrape energy meter data from
scrapeUrl: "http://192.168.25.46/state"

# How often to scrape the endpoint (in seconds)
scrapeIntervalSeconds: 2

# HTTP request timeout for scraping (in seconds)
scrapeTimeoutSeconds: 1.5

# Health check HTTP server port
healthCheckPort: 8080

# Prometheus metrics push configuration
# Interval between metric pushes in seconds (minimum: 1)
pushIntervalSeconds: 30

# Prometheus remote_write endpoint URL
# For Grafana Cloud, use: https://prometheus-prod-XX-YY-ZZ.grafana.net/api/prom/push
prometheusUrl: "https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push"

# Prometheus basic auth username (Grafana Cloud instance ID)
prometheusUsername: "83165"

# Grafana Cloud password (API key)
# IMPORTANT: Use PROMETHEUS_PASSWORD environment variable instead of storing here
prometheusPassword: ""

# Prometheus metric name
metricName: "active_power_watts"

# Start pushing at even second boundaries (improves alignment in time series)
startAtEvenSecond: true

# Ring buffer size (number of scrape results to keep in memory)
bufferSize: 5000

# Pyroscope profiling configuration
profiling:
  # Enable continuous profiling
  enabled: false

  # Application name (identifies this service in Pyroscope)
  applicationName: "pstryk-metric"

  # Pyroscope server address
  # For Grafana Cloud: https://profiles-prod-{region}.grafana.net
  # For local: http://localhost:4040
  serverAddress: ""

  # Basic authentication (for Grafana Cloud)
  # IMPORTANT: Use environment variables for credentials
  basicAuthUser: ""     # or use PYROSCOPE_BASIC_AUTH_USER env var
  basicAuthPassword: "" # or use PYROSCOPE_BASIC_AUTH_PASSWORD env var

  # Tenant ID (for multi-tenant Pyroscope, optional)
  tenantID: ""

  # Custom tags (labels) to add to all profiles
  tags:
    # Example: Add custom attributes
    # environment: "production"
    # region: "us-central1"

  # Profile types to enable
  cpuProfile: true           # CPU profiling
  allocObjectsProfile: true  # Memory allocations (objects)
  allocSpaceProfile: true    # Memory allocations (space)
  inuseObjectsProfile: true  # In-use memory (objects)
  inuseSpaceProfile: true    # In-use memory (space)
  goroutineProfile: false    # Goroutine count
  mutexProfile: false        # Mutex contention
  blockProfile: false        # Blocking operations

  # Profiling rates (only used when respective profile types are enabled)
  mutexProfileRate: 5  # Sample 1 in every 5 mutex events
  blockProfileRate: 5  # Sample 1 in every 5 block events

  # Disable automatic GC runs between heap profiles (default: false)
  # Set to true if you want to avoid GC overhead from profiling
  disableGCRuns: false

# Logging configuration
logging:
  # Log format: "console" (human-readable), "json" (structured), or "logfmt"
  # Use "console" for development, "json" or "logfmt" for production
  logFormat: "console"

  # Log level: "debug", "info", "warn", "error"
  logLevel: "info"

# OpenTelemetry tracing and metrics configuration
opentelemetry:
  # Enable OpenTelemetry instrumentation
  enabled: true

  # Service name for traces and metrics (identifies this service in Grafana)
  serviceName: "pstryk-metric"

  # Service version (appears in traces and metrics)
  serviceVersion: "1.0.0"

  # Deployment environment (e.g., production, staging, development)
  environment: "production"

  # OTLP protocol: "http/protobuf" (default, recommended) or "grpc"
  # Can be overridden with OTEL_EXPORTER_OTLP_PROTOCOL env var
  protocol: "http/protobuf"

  # Global OTLP endpoint (used for both traces and metrics if specific endpoints not set)
  # Format: https://otlp-gateway-prod-{region}.grafana.net/otlp
  # Example: https://otlp-gateway-prod-us-central-0.grafana.net/otlp
  # Can be overridden with OTEL_EXPORTER_OTLP_ENDPOINT env var
  endpoint: ""

  # Global authentication headers (used for both traces and metrics if specific headers not set)
  # Format: Authorization=Basic <base64(instanceId:grafanaCloudAccessToken)>
  # IMPORTANT: Set via OTEL_EXPORTER_OTLP_HEADERS environment variable (not this file)
  # The env var is read directly by telemetry code, not parsed by config loader
  headers: {}

  # OTLP trace exporter configuration
  traces:
    # Enable trace collection and export
    enabled: true

    # Specific OTLP endpoint for traces (overrides global endpoint if set)
    # Use OTEL_EXPORTER_OTLP_TRACES_ENDPOINT env var to override
    endpoint: ""

    # Specific authentication headers for traces (overrides global headers if set)
    # Use OTEL_EXPORTER_OTLP_TRACES_HEADERS env var to override
    # IMPORTANT: Use environment variables for security, not this file
    headers: {}

    # Sampling configuration
    # samplingRatio: 1.0 means trace 100% of requests (adjust for high volume)
    samplingRatio: 1.0

    # Batch processor configuration
    batch:
      # Maximum time to wait before exporting a batch (milliseconds)
      scheduleDelayMillis: 5000
      # Maximum batch size
      maxQueueSize: 2048
      # Maximum export batch size
      maxExportBatchSize: 512

  # OTLP metrics exporter configuration
  metrics:
    # Enable metrics collection and export
    enabled: true

    # Specific OTLP endpoint for metrics (overrides global endpoint if set)
    # Use OTEL_EXPORTER_OTLP_METRICS_ENDPOINT env var to override
    endpoint: ""

    # Specific authentication headers for metrics (overrides global headers if set)
    # IMPORTANT: Use environment variables for security, not this file
    headers: {}

    # Metric collection interval in milliseconds
    intervalMillis: 30000

    # Enable runtime metrics (Go runtime stats: goroutines, memory, GC)
    enableRuntimeMetrics: true

  # Resource attributes (additional metadata attached to all traces and metrics)
  resourceAttributes:
    # Example: Add custom attributes
    # deployment.datacenter: "us-central1"
    # host.type: "raspberry-pi"
